/*
-----------------------------------------
     Check if a binary tree is BST
-----------------------------------------
Time complexity :O(N)
Extra Space     :none
*/



#include<bits/stdc++.h>

using namespace std;

// creating node for tree (data type of data contained in node is int
class node
{
    public:
    int data;
    node* left;
    node* right;
    node(int data)
    {
        this->data = data;
        this->left = nullptr;
        this->right = nullptr;
    }
    
};


/* function to check if binary tree is BST
   value of all nodes in left subtree should be less
   value of all nodes in right subtree should be more
   so for each left child node the value should be less than parent
   for each right child node value should be more than parent
*/

bool isBST(node *root,int min,int max)
{
    //empty tree is BST
    if(root == nullptr)
    {
        return true;
    }
    else
    {
        if(root->data<min || root->data>max)
        {
            return false;
        }
        else
        {
            return isBST(root->left , min , root->data - 1) && isBST(root->right , root->data +1 , max);
        }
    }
}

// edit this function for different test cases
node* Create_Tree()
{
    node* root0 = new node(0);
    node* n1 = new node(-5);
    node* n2 = new node(5);
    node* n3 = new node(-8);
    node* n4 = new node(-3);
    node* n5 = new node(2);
    node* n6 = new node(10);
    node* n7 = new node(-9);
    root0->left = n1;
    root0->right = n2;
    n1->left = n3;
    n1->right = n4;
    n2->left = n5;
    n2->right = n6;
    n3->left = n7;
    return root0;
}

int main() {
    
	
    node* root =Create_Tree();
	if(isBST(root,INT_MIN,INT_MAX))
	{
	    cout<<"BST\n";
	}
	else
	{
	    cout<<"Not a BST\n";
	}
	
	return 0;
}
